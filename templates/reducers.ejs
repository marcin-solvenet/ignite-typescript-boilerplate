import * as SI from 'seamless-immutable';
import { ActionType, createStandardAction, getType } from 'typesafe-actions';
import { createReducer } from '../../Lib/ReduxHelpers';
import { RootState } from '../index';

/* ------------- Types and Action Creators ------------- */
interface <%= pascalCase(props.name) %>RequestParams {data: string; }
interface <%= pascalCase(props.name) %>SuccessParams {data: string; }
interface <%= pascalCase(props.name) %>FailureParams {data: string; }

const actionCreators = {
  request: createStandardAction("@@<%= pascalCase(props.name) %>/REQUEST")<<%= pascalCase(props.name) %>RequestParams>(),
  success: createStandardAction("@@<%= pascalCase(props.name) %>/SUCCESS")<<%= pascalCase(props.name) %>SuccessParams>(),
  failure: createStandardAction("@@<%= pascalCase(props.name) %>/FAILURE")<<%= pascalCase(props.name) %>FailureParams>(),
};

export const <%= pascalCase(props.name) %>Actions = actionCreators;

export interface <%= pascalCase(props.name) %>State {
  data?: <%= pascalCase(props.name) %>RequestParams | null;
  error?: <%= pascalCase(props.name) %>FailureParams | null;
  fetching?: boolean | null;
}

export type <%= pascalCase(props.name) %>Action = ActionType<typeof actionCreators>;

export type Immutable<%= pascalCase(props.name) %>State = SI.ImmutableObject<<%= pascalCase(props.name) %>State>;

/* ------------- Initial State ------------- */

export const INITIAL_STATE: Immutable<%= pascalCase(props.name) %>State = SI.from({
  data: null,
  error: null,
  fetching: null,
});

/* ------------- Selectors ------------- */
export const <%= pascalCase(props.name) %>Selectors = {
// getError: (state: RootState) => state.<%= camelCase(props.name) %>.error,
// getIsFetching: (state: RootState) => state.<%= camelCase(props.name) %>.fetching,
// getData: (state: RootState) => state.<%= camelCase(props.name) %>.data,
}

/* ------------- Reducers ------------- */

export const request = (
  state: Immutable<%= pascalCase(props.name) %>State, 
  action: ReturnType<typeof <%= pascalCase(props.name) %>Actions.request>
) => {
  return state.merge({ fetching: true });
}

export const success = (
  state: Immutable<%= pascalCase(props.name) %>State,
  action: ReturnType<typeof <%= pascalCase(props.name) %>Actions.success>
) => {
  const { payload } = action;
  return state.merge({ fetching: false, error: null, data: payload });
};

export const failure = (
  state: Immutable<%= pascalCase(props.name) %>State,
  action: ReturnType<typeof <%= pascalCase(props.name) %>Actions.failure>
) => {
  const { payload } = action;
  return state.merge({ fetching: false, error: payload, data: null });
}

/* ------------- Hookup Reducers To Types ------------- */

const <%= pascalCase(props.name) %>Reducer = createReducer<Immutable<%= pascalCase(props.name) %>State, <%= pascalCase(props.name) %>Action>(
  INITIAL_STATE,
  {
    [getType(<%= pascalCase(props.name) %>Actions.request)]: request,
    [getType(<%= pascalCase(props.name) %>Actions.success)]: success,
    [getType(<%= pascalCase(props.name) %>Actions.failure)]: failure
  }
);

export default <%= pascalCase(props.name) %>Reducer;