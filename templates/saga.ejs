/* ***********************************************************
* A short word on how to use this automagically generated file.
* We're often asked in the ignite gitter channel how to connect
* to a to a third party api, so we thought we'd demonstrate - but
* you should know you can use sagas for other flow control too.
*
* Other points:
*  - You'll need to add this saga to sagas/index.ts
*  - This template uses the api declared in sagas/index.ts, so
*    you'll need to define a constant in that file.
*************************************************************/
import { ApiResponse } from "apisauce";
import { SagaIterator } from "redux-saga";
import { call, put } from "redux-saga/effects";
import { <%= props.name %>Actions } from "../../Reducers/<%= props.name %>Reducers";

export function * get<%= props.name %> (
  api: any, 
  action: ReturnType<typeof <%= props.name %>Actions.request> 
): SagaIterator {
  const { payload } = action;
  // make the call to the api
  const response: ApiResponse<any>  = yield call(api.get<%= camelCase(props.name) %>, payload);

  // success?
  if (response.ok) {
    // You might need to change the response here - do this with a 'transform',
    // located in ../../Transforms/. Otherwise, just pass the data back from the api.
    yield put(<%= props.name %>Actions.success(response.data));
  } else {
    yield put(<%= props.name %>Actions.failure(response.data));
  }
}
